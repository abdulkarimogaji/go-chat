// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: service_go_chat.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GoChatClient is the client API for GoChat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoChatClient interface {
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	LoginUser(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error)
	CreateRoom(ctx context.Context, in *CreateRoomRequest, opts ...grpc.CallOption) (*CreateRoomResponse, error)
	DeleteRoom(ctx context.Context, in *DeleteRoomRequest, opts ...grpc.CallOption) (*DeleteRoomResponse, error)
	GetMyRooms(ctx context.Context, in *GetMyRoomsRequest, opts ...grpc.CallOption) (GoChat_GetMyRoomsClient, error)
	SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error)
	ReceiveMessages(ctx context.Context, in *ReceiveMessageRequest, opts ...grpc.CallOption) (GoChat_ReceiveMessagesClient, error)
}

type goChatClient struct {
	cc grpc.ClientConnInterface
}

func NewGoChatClient(cc grpc.ClientConnInterface) GoChatClient {
	return &goChatClient{cc}
}

func (c *goChatClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, "/pb.GoChat/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goChatClient) LoginUser(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/pb.GoChat/LoginUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goChatClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error) {
	out := new(DeleteUserResponse)
	err := c.cc.Invoke(ctx, "/pb.GoChat/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goChatClient) CreateRoom(ctx context.Context, in *CreateRoomRequest, opts ...grpc.CallOption) (*CreateRoomResponse, error) {
	out := new(CreateRoomResponse)
	err := c.cc.Invoke(ctx, "/pb.GoChat/CreateRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goChatClient) DeleteRoom(ctx context.Context, in *DeleteRoomRequest, opts ...grpc.CallOption) (*DeleteRoomResponse, error) {
	out := new(DeleteRoomResponse)
	err := c.cc.Invoke(ctx, "/pb.GoChat/DeleteRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goChatClient) GetMyRooms(ctx context.Context, in *GetMyRoomsRequest, opts ...grpc.CallOption) (GoChat_GetMyRoomsClient, error) {
	stream, err := c.cc.NewStream(ctx, &GoChat_ServiceDesc.Streams[0], "/pb.GoChat/GetMyRooms", opts...)
	if err != nil {
		return nil, err
	}
	x := &goChatGetMyRoomsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GoChat_GetMyRoomsClient interface {
	Recv() (*GetMyRoomsResponse, error)
	grpc.ClientStream
}

type goChatGetMyRoomsClient struct {
	grpc.ClientStream
}

func (x *goChatGetMyRoomsClient) Recv() (*GetMyRoomsResponse, error) {
	m := new(GetMyRoomsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *goChatClient) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error) {
	out := new(SendMessageResponse)
	err := c.cc.Invoke(ctx, "/pb.GoChat/sendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goChatClient) ReceiveMessages(ctx context.Context, in *ReceiveMessageRequest, opts ...grpc.CallOption) (GoChat_ReceiveMessagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &GoChat_ServiceDesc.Streams[1], "/pb.GoChat/receiveMessages", opts...)
	if err != nil {
		return nil, err
	}
	x := &goChatReceiveMessagesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GoChat_ReceiveMessagesClient interface {
	Recv() (*ReceiveMessageResponse, error)
	grpc.ClientStream
}

type goChatReceiveMessagesClient struct {
	grpc.ClientStream
}

func (x *goChatReceiveMessagesClient) Recv() (*ReceiveMessageResponse, error) {
	m := new(ReceiveMessageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GoChatServer is the server API for GoChat service.
// All implementations must embed UnimplementedGoChatServer
// for forward compatibility
type GoChatServer interface {
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	LoginUser(context.Context, *LoginRequest) (*LoginResponse, error)
	DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error)
	CreateRoom(context.Context, *CreateRoomRequest) (*CreateRoomResponse, error)
	DeleteRoom(context.Context, *DeleteRoomRequest) (*DeleteRoomResponse, error)
	GetMyRooms(*GetMyRoomsRequest, GoChat_GetMyRoomsServer) error
	SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error)
	ReceiveMessages(*ReceiveMessageRequest, GoChat_ReceiveMessagesServer) error
	mustEmbedUnimplementedGoChatServer()
}

// UnimplementedGoChatServer must be embedded to have forward compatible implementations.
type UnimplementedGoChatServer struct {
}

func (UnimplementedGoChatServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedGoChatServer) LoginUser(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginUser not implemented")
}
func (UnimplementedGoChatServer) DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedGoChatServer) CreateRoom(context.Context, *CreateRoomRequest) (*CreateRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoom not implemented")
}
func (UnimplementedGoChatServer) DeleteRoom(context.Context, *DeleteRoomRequest) (*DeleteRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoom not implemented")
}
func (UnimplementedGoChatServer) GetMyRooms(*GetMyRoomsRequest, GoChat_GetMyRoomsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetMyRooms not implemented")
}
func (UnimplementedGoChatServer) SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedGoChatServer) ReceiveMessages(*ReceiveMessageRequest, GoChat_ReceiveMessagesServer) error {
	return status.Errorf(codes.Unimplemented, "method ReceiveMessages not implemented")
}
func (UnimplementedGoChatServer) mustEmbedUnimplementedGoChatServer() {}

// UnsafeGoChatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoChatServer will
// result in compilation errors.
type UnsafeGoChatServer interface {
	mustEmbedUnimplementedGoChatServer()
}

func RegisterGoChatServer(s grpc.ServiceRegistrar, srv GoChatServer) {
	s.RegisterService(&GoChat_ServiceDesc, srv)
}

func _GoChat_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoChatServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GoChat/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoChatServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoChat_LoginUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoChatServer).LoginUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GoChat/LoginUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoChatServer).LoginUser(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoChat_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoChatServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GoChat/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoChatServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoChat_CreateRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoChatServer).CreateRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GoChat/CreateRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoChatServer).CreateRoom(ctx, req.(*CreateRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoChat_DeleteRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoChatServer).DeleteRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GoChat/DeleteRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoChatServer).DeleteRoom(ctx, req.(*DeleteRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoChat_GetMyRooms_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetMyRoomsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GoChatServer).GetMyRooms(m, &goChatGetMyRoomsServer{stream})
}

type GoChat_GetMyRoomsServer interface {
	Send(*GetMyRoomsResponse) error
	grpc.ServerStream
}

type goChatGetMyRoomsServer struct {
	grpc.ServerStream
}

func (x *goChatGetMyRoomsServer) Send(m *GetMyRoomsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _GoChat_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoChatServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GoChat/sendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoChatServer).SendMessage(ctx, req.(*SendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoChat_ReceiveMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReceiveMessageRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GoChatServer).ReceiveMessages(m, &goChatReceiveMessagesServer{stream})
}

type GoChat_ReceiveMessagesServer interface {
	Send(*ReceiveMessageResponse) error
	grpc.ServerStream
}

type goChatReceiveMessagesServer struct {
	grpc.ServerStream
}

func (x *goChatReceiveMessagesServer) Send(m *ReceiveMessageResponse) error {
	return x.ServerStream.SendMsg(m)
}

// GoChat_ServiceDesc is the grpc.ServiceDesc for GoChat service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoChat_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.GoChat",
	HandlerType: (*GoChatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _GoChat_CreateUser_Handler,
		},
		{
			MethodName: "LoginUser",
			Handler:    _GoChat_LoginUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _GoChat_DeleteUser_Handler,
		},
		{
			MethodName: "CreateRoom",
			Handler:    _GoChat_CreateRoom_Handler,
		},
		{
			MethodName: "DeleteRoom",
			Handler:    _GoChat_DeleteRoom_Handler,
		},
		{
			MethodName: "sendMessage",
			Handler:    _GoChat_SendMessage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetMyRooms",
			Handler:       _GoChat_GetMyRooms_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "receiveMessages",
			Handler:       _GoChat_ReceiveMessages_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service_go_chat.proto",
}
